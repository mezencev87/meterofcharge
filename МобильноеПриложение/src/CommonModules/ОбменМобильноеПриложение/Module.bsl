#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

Функция ПолучитьПрефиксНомера() Экспорт

	Узел = ПланыОбмена.Мобильные.ЭтотУзел().ПолучитьОбъект();
	Возврат СокрЛП(Узел.Код) + "-";
КонецФункции


Функция ВыполнитьОбменДанными(ТекстОшибки, Знач Прокси) Экспорт

	//Подключение к сервису обмена, если еще нет подключения
	Если Прокси = Неопределено Тогда
		Прокси = ПолучитьПрокси(ТекстОшибки);
	КонецЕсли;
	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	УзелСервера = ПланыОбмена.Мобильные.НайтиПоКоду("001").ПолучитьОбъект();
	МобильныйУзел = ПланыОбмена.Мобильные.ЭтотУзел().ПолучитьОбъект();
	
	Если УзелСервера.НомерПринятого <> УзелСервера.НомерОтправленного Тогда
		УзелСервера.НомерПринятого = 1;
		УзелСервера.НомерОтправленного = 0;
		УзелСервера.Записать();
	КонецЕсли;
	// Инициализируем обмен с центральной базой
	Прокси.НачатьОбмен(МобильныйУзел.Код, УзелСервера.НомерПринятого, УзелСервера.НомерОтправленного); 
	
	// Принимаем данные
	ДанныеОбмена = Прокси.ПолучитьДанные(МобильныйУзел.Код);
	ПринятьПакетОбмена(УзелСервера.Ссылка, ДанныеОбмена);
	// Отправляем данные
	ДанныеОбмена = СформироватьПакетОбмена(УзелСервера.Ссылка);
	Прокси.ЗаписатьДанные(МобильныйУзел.Код, ДанныеОбмена);
   
	Возврат Истина;

КонецФункции


Функция ЗарегистрироватьКаналСвязи(ТекстОшибки, Абонент = Неопределено) Экспорт

	//Подключение к сервису обмена
	Прокси = ПолучитьПрокси(ТекстОшибки);
	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	//[повторная] регистрация узла сервера
	КодЦБ = "001";
	УзелСервера = ПланыОбмена.Мобильные.НайтиПоКоду(КодЦБ);
	Если НЕ УзелСервера.Пустая() Тогда
		УзелСервера = УзелСервера.ПолучитьОбъект();
		УзелСервера.Удалить();
	КонецЕсли;
	УзелСервера = ПланыОбмена.Мобильные.СоздатьУзел();
	УзелСервера.Код = КодЦБ;
	УзелСервера.Наименование = "Центральный";
	УзелСервера.Записать();
	
	//[повторная] регистрация текущего устройства на сервере
	МобильныйУзел = ПланыОбмена.Мобильные.ЭтотУзел().ПолучитьОбъект();
	ИдентификаторУстройства = Новый УникальныйИдентификатор();
	Если Не ЗначениеЗаполнено(Абонент) Тогда
		//Запоминаем имеющегося абонента, если он не передан параметром
		Абонент = МобильныйУзел.Владелец;
	КонецЕсли;
	МобильныйУзел.Код = Прокси.ПолучитьНомер(Строка(ИдентификаторУстройства), Абонент.Наименование);
	МобильныйУзел.Наименование = "Мобильное приложение";
	МобильныйУзел.Владелец = Абонент;
	МобильныйУзел.Записать();
	Константы.ИдентификаторУстройства.Установить(ИдентификаторУстройства);
	
	Если ВыполнитьОбменДанными(ТекстОшибки, Прокси) Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелСервера.Ссылка);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


Функция ПроверитьРегистрацию() Экспорт

	Узел = ПланыОбмена.Мобильные.ЭтотУзел().ПолучитьОбъект();
	Возврат ЗначениеЗаполнено(Узел.Владелец);
КонецФункции


Функция ПолучитьПрокси(ТекстОшибки) Экспорт

	ТекстОшибки = "";

	Адрес = Константы.АдресЦентральнойБазы.Получить();
	Адрес = Адрес + "/ws/wsExchange.1cws?wsdl";

	Попытка
		Определения = Новый WSОпределения(Адрес, , , 20);
	Исключение
		// Сообщим пользователю о том, что не получилось получить определение сервиса
		ТекстОшибки = "Не удалось установить соединение с сервером. Повторите попытку позже.";
		Возврат Неопределено;
	КонецПопытки;

	URI = URIПространстваИменСервиса();
	Прокси = Новый WSПрокси(Определения, URI, "MAExchange", "MAExchangeSoap");

	Возврат Прокси;

КонецФункции


Функция СформироватьПакетОбмена(УзелОбмена) Экспорт

	ЗаписьXML = Новый ЗаписьXML;

	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);

	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");

	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		
		// Записываем данные в сообщение
		ЗаписатьДанные(ЗаписьXML, Данные);

	КонецЦикла;

	ЗаписьСообщения.ЗакончитьЗапись();
	ТекстХМЛ = ЗаписьXML.Закрыть();

	Возврат Новый ХранилищеЗначения(ТекстХМЛ, Новый СжатиеДанных(9));

КонецФункции


Процедура ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена) Экспорт

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);

	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);

	НачатьТранзакцию();
	Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл

		Данные = ПрочитатьДанные(ЧтениеXML);

		Если Не Данные = Неопределено Тогда
			// Не переносим изменение, полученное из офиса, если есть регистрация изменения на 
			//планшете
			Если Не ПринятьИзменения(ЧтениеСообщения.Отправитель, Данные) Тогда
				Продолжить;
			КонецЕсли;

			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			
			ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
			Если Метаданные.Документы.Содержит(ОбъектМетаданных) И НЕ ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
				Данные.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Если ОбъектМетаданных = Метаданные.Справочники.Услуги И ЗначениеЗаполнено(Данные.ИмяКартинки) Тогда
					ПоместитьВоВременноеХранилище(БиблиотекаКартинок[СокрЛП(Данные.ИмяКартинки)]);
					Данные.Фото = Новый ХранилищеЗначения(БиблиотекаКартинок[СокрЛП(Данные.ИмяКартинки)]);
				КонецЕсли;
				Данные.ОбменДанными.Загрузка = Истина;
				Данные.Записать();
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	ЗафиксироватьТранзакцию();

	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();

КонецПроцедуры


Процедура ЗаписатьДанные(ЗаписьXML, Данные) Экспорт

		// Записываем данные с помощью стандартного метода
		ЗаписатьXML(ЗаписьXML, Данные);

КонецПроцедуры


Функция ВозможностьЧтенияДанных(ЧтениеXML) Экспорт
	
	// Получаем тип данных XML, который может быть считан в данный момент
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

//	Если (ТипXML.ИмяТипа = "CatalogObject.Товары.Вручную" Или ТипXML.ИмяТипа = "CatalogObject.Склады.Вручную")
//		И ТипXML.URIПространстваИмен = "" Тогда
//		Возврат Истина;
//	КонецЕсли;

	Возврат ВозможностьЧтенияXML(ЧтениеXML);

КонецФункции


Функция ЗаменитьСсылки(Данные, ИмяСправочника, ИмяПоля) Экспорт
	Выборка = Справочники[ИмяСправочника].Выбрать(,,Новый Структура("Наименование", Данные.Наименование));
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Данные.Ссылка Тогда Продолжить; КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Выборка.Ссылка);
		тзЭлементы = НайтиПоСсылкам(МассивСсылок);
		Для Каждого Элемент Из тзЭлементы Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Элемент.Данные));
			Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			оЗначение = Элемент[1].ПолучитьОбъект();
			оЗначение[ИмяПоля] = Данные.Ссылка;
			оЗначение.Записать();
		КонецЦикла;
		Выборка.Ссылка.ПолучитьОбъект().Удалить();
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ПрочитатьДанные(ЧтениеXML) Экспорт

	ТипЭЯР = ПолучитьXMLТип(ЧтениеXML);
	Если ТипЭЯР = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Пытаемся прочесть значение из объекта ЧтениеXML стандартным образом
	Данные = ПрочитатьXML(ЧтениеXML);
	Если СтрНайти(ТипЭЯР.ИмяТипа, "CatalogObject.Абоненты") > 0 ИЛИ СтрНайти(ТипЭЯР.ИмяТипа, "CatalogObject.Адреса") > 0 Тогда
		ЗаменитьСсылки(Данные, СтрРазделить(ТипЭЯР.ИмяТипа, ".")[1], "Владелец");
	КонецЕсли;
	Возврат Данные;

КонецФункции // ПрочитатьДанные(ЧтениеXML)



Функция ПринятьИзменения(Отправитель, Данные) Экспорт

	Прием = Истина;
	Если ПланыОбмена.ИзменениеЗарегистрировано(Отправитель, Данные) Тогда

		//Если ТипЗнч(Данные) = Тип("ДокументОбъект.Расчет") Тогда
			Прием = Ложь;
		//КонецЕсли;

	КонецЕсли;
	Возврат Прием;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция URIПространстваИменСервиса()

	Возврат "http://localhost/wsExchange";

КонецФункции

#КонецОбласти

//Процедура ЗаписатьXMLТовары(ЗаписьXML, Товар) Экспорт
//	
//	// Записываем начало элемента XML
//	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Товары.Вручную");
//	
//	// Ссылка
//	ЗаписатьXML(ЗаписьXML, Товар.Ссылка, "Ref", НазначениеТипаXML.Явное);
//	// ЭтоГруппа
//	ЗаписатьXML(ЗаписьXML, Товар.ЭтоГруппа, "IsFolder", НазначениеТипаXML.Явное);
//	// Родитель
//	ЗаписатьXML(ЗаписьXML, Товар.Родитель, "Parent", НазначениеТипаXML.Явное);
//	// Наименование
//	ЗаписатьXML(ЗаписьXML, Товар.Наименование, "Description", НазначениеТипаXML.Явное);
//	
//	//Реквизиты, выгружаемые только для элемента  справочника
//	Если Не Товар.ЭтоГруппа Тогда
//		//Описание
//		ЗаписатьXML(ЗаписьXML, Товар.Описание, "Описание", НазначениеТипаXML.Явное);
//		//ФайлКартинки
//		ЗаписатьXML(ЗаписьXML, Товар.ФайлКартинки, "ФайлКартинки", НазначениеТипаXML.Явное);
//	КонецЕсли;	
//	
//	// Записываем конец элемента
//	ЗаписьXML.ЗаписатьКонецЭлемента();
//
//КонецПроцедуры
//
//Процедура ЗаписатьXMLСклады(ЗаписьXML, Склад) Экспорт
//	
//	// Записываем начало элемента XML
//	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Склады.Вручную");
//	
//	// Ссылка
//	ЗаписатьXML(ЗаписьXML, Склад.Ссылка, "Ref", НазначениеТипаXML.Явное);
//	// Наименование
//	ЗаписатьXML(ЗаписьXML, Склад.Наименование, "Description", НазначениеТипаXML.Явное);
//	
//	// Записываем конец элемента
//	ЗаписьXML.ЗаписатьКонецЭлемента();
//
//КонецПроцедуры

//Функция ПрочитатьXMLСклады(ЧтениеXML) Экспорт
//
//	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
//		ВызватьИсключение "Ошибка чтения XML";
//	КонецЕсли;
//	
//	// Чтение следующего узла
//	ЧтениеXML.Прочитать();
//	
//	// Чтение ссылки на элемент справочника
//	СкладСсылка = ПрочитатьXML(ЧтениеXML);
//	Если ТипЗнч(СкладСсылка) <> Тип("СправочникСсылка.Склады") Тогда
//		ВызватьИсключение "Ошибка чтения XML";
//	КонецЕсли;
//	
//	// Пытаемся создать объект по полученной ссылке
//	Склад = СкладСсылка.ПолучитьОбъект();
//
//	Если Склад = Неопределено Тогда
//		// Создаем элемент справочника
//		Склад = Справочники.Склады.СоздатьЭлемент();
//		
//		// Устанавливаем значение ссылки для нового объекта
//		Склад.УстановитьСсылкуНового(СкладСсылка);
//	КонецЕсли;
//	
//	// Наименование
//	Склад.Наименование = ПрочитатьXML(ЧтениеXML);
//	
//	// Проверяем, что текущим узлом является КонецЭлемента
//	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
//		ВызватьИсключение "Ошибка чтения XML";
//	КонецЕсли;
//	
//	// Чтение следующего узла для завершение чтения элемента
//	ЧтениеXML.Прочитать();
//	Возврат Склад;
//
//КонецФункции
//
//Функция ПрочитатьXMLТовары(ЧтениеXML) Экспорт
//
//	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
//		ВызватьИсключение "Ошибка чтения XML";
//	КонецЕсли;
//	
//	// Чтение следующего узла
//	ЧтениеXML.Прочитать();
//	
//	// Чтение ссылки на элемент справочника
//	ТоварСсылка = ПрочитатьXML(ЧтениеXML);
//	Если ТипЗнч(ТоварСсылка) <> Тип("СправочникСсылка.Товары") Тогда
//		ВызватьИсключение "Ошибка чтения XML";
//	КонецЕсли;
//	
//	// Пытаемся создать объект по полученной ссылке
//	Товар = ТоварСсылка.ПолучитьОбъект();
//	
//	//Чтение признака группы
//	ЭтоГруппа = ПрочитатьXML(ЧтениеXML);
//	Если Товар <> Неопределено Тогда
//		Если Товар.ЭтоГруппа <> ЭтоГруппа Тогда
//			ВызватьИсключение "Некорректные данные";
//		КонецЕсли;
//
//	Иначе
//		// Создаем элемент справочника
//		Если ЭтоГруппа = Истина Тогда
//			Товар = Справочники.Товары.СоздатьГруппу();
//		Иначе
//			Товар = Справочники.Товары.СоздатьЭлемент();
//		КонецЕсли;		 
//		
//		// Устанавливаем значение ссылки для нового объекта
//		Товар.УстановитьСсылкуНового(ТоварСсылка);
//	КонецЕсли;
//	
//	//Родитель
//	Товар.Родитель = ПрочитатьXML(ЧтениеXML);
//	// Наименование
//	Товар.Наименование = ПрочитатьXML(ЧтениеXML);
//	
//	//Реквизиты, загружаемые только для элемента  справочника
//	Если Не Товар.ЭтоГруппа Тогда
//		//Описание
//		Товар.Описание = ПрочитатьXML(ЧтениеXML);
//		//ФайлКартинки
//		Товар.ФайлКартинки = ПрочитатьXML(ЧтениеXML);
//	КонецЕсли;	
//	
//	
//	// Проверяем, что текущим узлом является КонецЭлемента
//	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
//		ВызватьИсключение "Ошибка чтения XML";
//	КонецЕсли;
//	
//	// Чтение следующего узла для завершение чтения элемента
//	ЧтениеXML.Прочитать();
//	Возврат Товар;
//
//КонецФункции
