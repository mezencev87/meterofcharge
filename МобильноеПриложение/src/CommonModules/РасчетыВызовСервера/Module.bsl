#Область ПрограммныйИнтерфейс
Функция ТарифДляНабораУслуг(НаборУслуг, ВидРасчета, ДатаАктуальности) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрУслугПоПоставщикамСрезПоследних.Количество,
	|	РеестрУслугПоПоставщикамСрезПоследних.Цена,
	|	РеестрУслугПоПоставщикамСрезПоследних.ОкончаниеДействия
	|ИЗ
	|	РегистрСведений.РеестрУслугПоПоставщикам.СрезПоследних(&ДатаАктуальности, Услуга = &Услуга
	|	И Поставщик = &Поставщик
	|	И ВидЦены = &ВидРасчета) КАК РеестрУслугПоПоставщикамСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеестрУслугПоПоставщикамСрезПоследних.Период УБЫВ";

	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("Услуга", НаборУслуг.Услуга);
	Запрос.УстановитьПараметр("Поставщик", НаборУслуг.Поставщик);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Цена / ВыборкаДетальныеЗаписи.Количество;
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетРасчеты.Тариф
		|ИЗ
		|	Документ.Расчет.Расчеты КАК РасчетРасчеты
		|ГДЕ
		|	РасчетРасчеты.НаборУслуг = &НаборУслуг
		|	И РасчетРасчеты.ВидРасчета = &ВидРасчета
		|	И РасчетРасчеты.ОкончаниеПериода <= &ДатаАктуальности
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетРасчеты.ОкончаниеПериода УБЫВ";

		Запрос.УстановитьПараметр("НаборУслуг", НаборУслуг);
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Тариф;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ДобавитьДвижениеРасчетов(Движения, Период, НаборУслуг, ВидРасчета, ДельтаПоказаний, ДельтаБаланса) Экспорт
	Если ДельтаПоказаний >= 0 И ДельтаБаланса >= 0 Тогда
		ДвижениеКорректировки = Движения.РасчетыЗаУслуги.Добавить();
		ДвижениеКорректировки.Период = Период;
		ДвижениеКорректировки.ВидДвижения = ВидДвиженияНакопления.Приход;
		ДвижениеКорректировки.НаборУслуг = НаборУслуг;
		ДвижениеКорректировки.ВидРасчета = ВидРасчета;
		ДвижениеКорректировки.Показания = ДельтаПоказаний;
		ДвижениеКорректировки.Баланс = ДельтаБаланса;
	ИначеЕсли ДельтаПоказаний <= 0 И ДельтаБаланса <= 0 Тогда
		ДвижениеКорректировки = Движения.РасчетыЗаУслуги.Добавить();
		ДвижениеКорректировки.Период = Период;
		ДвижениеКорректировки.ВидДвижения = ВидДвиженияНакопления.Расход;
		ДвижениеКорректировки.НаборУслуг = НаборУслуг;
		ДвижениеКорректировки.ВидРасчета = ВидРасчета;
		ДвижениеКорректировки.Показания = -1 * ДельтаПоказаний;
		ДвижениеКорректировки.Баланс = -1 * ДельтаБаланса;
	Иначе
		ДвижениеКорректировки = Движения.РасчетыЗаУслуги.Добавить();
		ДвижениеКорректировки.Период = Период;
		ДвижениеКорректировки.ВидДвижения = ?(ДельтаБаланса >= 0, ВидДвиженияНакопления.Приход,
			ВидДвиженияНакопления.Расход);
		ДвижениеКорректировки.НаборУслуг = НаборУслуг;
		ДвижениеКорректировки.ВидРасчета = ВидРасчета;
		ДвижениеКорректировки.Баланс = ?(ДельтаБаланса >= 0, ДельтаБаланса, -1 * ДельтаБаланса);

		ДвижениеКорректировки = Движения.РасчетыЗаУслуги.Добавить();
		ДвижениеКорректировки.Период = Период;
		ДвижениеКорректировки.ВидДвижения = ?(ДельтаПоказаний >= 0, ВидДвиженияНакопления.Приход,
			ВидДвиженияНакопления.Расход);
		ДвижениеКорректировки.НаборУслуг = НаборУслуг;
		ДвижениеКорректировки.ВидРасчета = ВидРасчета;
		ДвижениеКорректировки.Показания = ?(ДельтаПоказаний >= 0, ДельтаПоказаний, -1 * ДельтаПоказаний);
	КонецЕсли;
КонецПроцедуры

Функция СуммаОплатыПоДокументу(ДокументРасчета) Экспорт
	Если ТипЗнч(ДокументРасчета) = Тип("ДокументСсылка.Расчет") Тогда
		докОбъект = ДокументРасчета.ПолучитьОбъект();
		Возврат докОбъект.Расчеты.Итог("Оплата");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(РасчетРасчеты.Оплата) КАК Оплата,
		|	РасчетРасчеты.Ссылка.Адрес
		|ИЗ
		|	Документ.Расчет.Расчеты КАК РасчетРасчеты
		|ГДЕ
		|	РасчетРасчеты.Ссылка.Адрес = &Адрес
		|СГРУППИРОВАТЬ ПО
		|	РасчетРасчеты.Ссылка.Адрес";

		Запрос.УстановитьПараметр("Адрес", ДокументРасчета);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Оплата;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция КартинкаПоУслуге(Услуга) Экспорт
	Возврат ПолучитьНавигационнуюСсылку(Услуга, "Фото");
КонецФункции

Функция СписокПоставщиковПоУслуге(Услуга) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоставщикиОказываемыеУслуги.Ссылка
	|ИЗ
	|	Справочник.Поставщики.ОказываемыеУслуги КАК ПоставщикиОказываемыеУслуги
	|ГДЕ
	|	ПоставщикиОказываемыеУслуги.Услуга = &Услуга";

	Запрос.УстановитьПараметр("Услуга", Услуга);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СписокПоставщиков = "Поставщики:  ";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокПоставщиков = СписокПоставщиков + ВыборкаДетальныеЗаписи.Ссылка + ", ";
	КонецЦикла;
	Возврат Лев(СписокПоставщиков, СтрДлина(СписокПоставщиков) - 2);
КонецФункции
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти