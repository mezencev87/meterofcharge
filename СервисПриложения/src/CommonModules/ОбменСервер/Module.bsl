#Область ПрограммныйИнтерфейс
Функция ПолучитьПрефиксНомера() Экспорт
	Узел = ПланыОбмена.Мобильные.ЭтотУзел().ПолучитьОбъект();
	Возврат СокрЛП(Узел.Код) + "-";
КонецФункции

Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	Узел = УзелОбмена.ПолучитьОбъект();
	СоставПланаОбмена = Узел.Метаданные().Состав;
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		Если ЭлементСоставаПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
		Иначе
			Запрос = Новый Запрос;
			Если Метаданные.Справочники.Содержит(ЭлементСоставаПланаОбмена.Метаданные) Тогда
				Запрос.Текст = "ВЫБРАТЬ
							   |	Справочник.Ссылка
							   |ИЗ
							   |	Справочник." + ЭлементСоставаПланаОбмена.Метаданные.Имя + " КАК Справочник
							   |ГДЕ ";
				Если ЭлементСоставаПланаОбмена.Метаданные.Имя = "Абоненты" Тогда
					Запрос.Текст = Запрос.Текст + " Справочник.Ссылка = &Абонент";
				ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные.Имя = "Адреса" Тогда
					Запрос.Текст = Запрос.Текст + " Справочник.Владелец = &Абонент";
				ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные.Имя = "НаборыУслуг" Тогда
					Запрос.Текст = Запрос.Текст + " Справочник.Владелец.Владелец = &Абонент";
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли Метаданные.Документы.Содержит(ЭлементСоставаПланаОбмена.Метаданные) Тогда
				Запрос.Текст = "ВЫБРАТЬ
							   |	Документ.Ссылка
							   |ИЗ
							   |	Документ." + ЭлементСоставаПланаОбмена.Метаданные.Имя + " КАК Документ
							   |ГДЕ
							   |	Документ.Адрес.Владелец = &Абонент";
			Иначе
				Продолжить;
			КонецЕсли;
			Запрос.УстановитьПараметр("Абонент", Узел.Владелец);
			//@skip-check query-in-loop
			РезультатЗапроса = Запрос.Выполнить();

			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
			КонецЦикла;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция СформироватьПакетОбмена(УзелОбмена) Экспорт

	ЗаписьXML = Новый ЗаписьXML;

	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);

	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");

	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
//	//КостыльВекаДля1С
//	МассивДляОтправки = Новый Массив;
//	Пока ВыборкаИзменений.Следующий() Цикл
//		МассивДляОтправки.Добавить(ВыборкаИзменений.Получить());
//	КонецЦикла;
//	инд = МассивДляОтправки.ВГраница();
//	Пока инд >= 0 Цикл
//		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных
//		Если Не НуженПереносДанных(МассивДляОтправки[инд], УзелОбмена) Тогда
//			// Получаем значение с возможным удалением данных
//			УдалениеДанных(МассивДляОтправки[инд]);
//		КонецЕсли;	
//
//		// Записываем данные в сообщение
//		ЗаписьДанных(ЗаписьXML, МассивДляОтправки[инд]);
//		инд = инд - 1;
//	КонецЦикла;
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных
		Если Не НуженПереносДанных(Данные, УзелОбмена) Тогда
			// Получаем значение с возможным удалением данных
			УдалениеДанных(Данные);
		КонецЕсли;	

		// Записываем данные в сообщение
		ЗаписьДанных(ЗаписьXML, Данные);
	КонецЦикла;
	ЗаписьСообщения.ЗакончитьЗапись();

	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
КонецФункции

Процедура ЗаписьДанных(ЗаписьXML, Данные)
	ЗаписатьXML(ЗаписьXML, Данные);
КонецПроцедуры

Процедура ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена) Экспорт

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);

	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);

	НачатьТранзакцию();
	Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл

		Данные = ПрочитатьДанные(ЧтениеXML);

		Если Не Данные = Неопределено Тогда
		// Не переносим изменение, полученное от планшета, если есть регистрация 
		//изменения в офисе.
			Если Не ПринятьИзменения(ЧтениеСообщения.Отправитель, Данные) Тогда
				Продолжить;
			КонецЕсли;

			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;

			ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(),
				Данные.Метаданные());
			Если Метаданные.Документы.Содержит(ОбъектМетаданных) И Не ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
				Данные.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Данные.ОбменДанными.Загрузка = Истина;
				Данные.Записать();
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	ЗафиксироватьТранзакцию();

	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();

КонецПроцедуры

Функция ВозможностьЧтенияДанных(ЧтениеXML) Экспорт
	
	// Получаем тип данных XML, который может быть считан в данный момент
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ВозможностьЧтенияXML(ЧтениеXML);

КонецФункции

Функция ПрочитатьДанные(ЧтениеXML) Экспорт

	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Пытаемся прочесть значение из объекта ЧтениеXML стандартным образом
	Возврат ПрочитатьXML(ЧтениеXML);

КонецФункции

Функция ПринятьИзменения(Отправитель, Данные) Экспорт

	Прием = Истина;
	Если ПланыОбмена.ИзменениеЗарегистрировано(Отправитель, Данные) Тогда

	КонецЕсли;
	Возврат Прием;

КонецФункции

Функция НуженПереносДанных(Данные, УзелОбмена) Экспорт

	ооУзелОбмена = УзелОбмена.ПолучитьОбъект();
	Возврат ооУзелОбмена.НуженПереносДанных(Данные);

КонецФункции

Процедура УдалениеДанных(Данные) Экспорт
	
	// Получаем объект описания метаданного, соответствующий данным
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Или Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		// Перенос удаления объекта для объектных
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		// Очищаем данные
		Данные.Очистить();
	КонецЕсли;

КонецПроцедуры
#КонецОбласти