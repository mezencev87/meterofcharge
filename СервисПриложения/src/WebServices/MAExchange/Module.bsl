
#Область ОбработчикиСобытий

Функция НачатьОбмен(КодУзла, НомерОтправленного, НомерПринятого)
    
	ссУзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла); 
	Если ссУзелОбмена.Пустая() Тогда
		Возврат Ложь;	
	КонецЕсли;
	УзелОбмена = ссУзелОбмена.ПолучитьОбъект();

	Если УзелОбмена.НомерОтправленного <> НомерОтправленного ИЛИ УзелОбмена.НомерПринятого <> НомерПринятого Тогда
		УзелОбмена.НомерОтправленного = НомерОтправленного;
		УзелОбмена.НомерПринятого = НомерПринятого;
		УзелОбмена.Записать();
		ОбменСервер.ЗарегистрироватьИзмененияДанных(УзелОбмена.Ссылка);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция ПолучитьДанные(КодУзла)
    
	УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла); 
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение("Неизвестное устройство - " + КодУзла);
	КонецЕсли;
	
	Возврат ОбменСервер.СформироватьПакетОбмена(УзелОбмена);
    
КонецФункции

Функция ЗаписатьДанные(КодУзла, ДанныеМобильногоПриложения)
    
	УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла); 
	Если УзелОбмена.Пустая() Тогда
		ВызватьИсключение("Неизвестное устройство - " + КодУзла);
	КонецЕсли;
	
	ОбменСервер.ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения);
	
	Возврат Истина;
    
КонецФункции

Функция НовыйИдентификаторПодписчикаУведомлений(КодУзла, ИдентификаторXDTO)
	
    Идентификатор = СериализаторXDTO.ПрочитатьXDTO(ИдентификаторXDTO);
	УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла); 
	
	Если УзелОбмена.Пустая() Тогда
	    ВызватьИсключение("Неизвестное устройство - " + КодУзла);
	КонецЕсли;
	
	Узел = УзелОбмена.ПолучитьОбъект();
	Узел.ИдентификаторПодписчикаДоставляемыхУведомлений = Новый ХранилищеЗначения(Идентификатор);
	Узел.Записать();
	
	Возврат Узел.ИдентификаторПодписчикаДоставляемыхУведомлений;
	
КонецФункции

Функция ПолучитьНомер(ИдентификаторУстройства, Абонент)
	ссАбонент = Справочники.Абоненты.НайтиПоНаименованию(Абонент);
	Если НЕ ЗначениеЗаполнено(ссАбонент) Тогда
		обАбонент = Справочники.Абоненты.СоздатьЭлемент();
		обАбонент.Наименование = Абонент;
		обАбонент.Записать();
		ссАбонент = обАбонент.Ссылка;
	КонецЕсли;
	
	УзелОбмена = ПланыОбмена.Мобильные.НайтиПоРеквизиту("Владелец", ссАбонент);
	Пока ЗначениеЗаполнено(УзелОбмена) Цикл
		УзелДляУдаления = УзелОбмена.ПолучитьОбъект();
		УзелДляУдаления.Владелец = Справочники.Абоненты.НайтиПоНаименованию("Для удаления");
		УзелДляУдаления.Записать();
		УзелДляУдаления.Удалить();
		УзелОбмена = ПланыОбмена.Мобильные.НайтиПоРеквизиту("Владелец", ссАбонент);
	КонецЦикла;
	УзелОбмена = ПланыОбмена.Мобильные.СоздатьУзел();
	УзелОбмена.УстановитьНовыйКод();
	//УзелОбмена.УстановитьСсылкуНового(УзелОбмена.Ссылка);
	УзелОбмена.Наименование = ИдентификаторУстройства;
	УзелОбмена.Владелец = ссАбонент;
	УзелОбмена.Записать();
	ОбменСервер.ЗарегистрироватьИзмененияДанных(УзелОбмена.Ссылка);
	Возврат УзелОбмена.Код;
КонецФункции


#КонецОбласти

//Функция ПолучитьОтчет(ДатаНачала, ДатаОкончания, СтрокаИнформацииРасшифровки)
//    
//	Отчет = Отчеты.ОстаткиТоваровНаСкладах.Создать();
//    
//	ПараметрыВывода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода;
//	ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Начало);
//	ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
//	ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
//    
//	ПараметрДанныхНачалоПериода = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0];
//	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
//	ПараметрДанныхНачалоПериода.Использование = Истина;
//
//	ПараметрДанныхКонецПериода = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1];
//	ПараметрДанныхКонецПериода.Значение = ДатаОкончания;
//	ПараметрДанныхКонецПериода.Использование = Истина;
//
//	ТабличныйДокумент = Новый ТабличныйДокумент();
//	ДанныеРасшифровки = Неопределено;
//	Отчет.СкомпоноватьРезультат(ТабличныйДокумент, ДанныеРасшифровки);
//	
//	ИнформацияРасшифровки = Новый Соответствие;
//	Для Каждого Элемент из ДанныеРасшифровки.Элементы Цикл 
//		Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
//			Поля = Элемент.ПолучитьПоля();
//			Если Поля.Количество() > 0 Тогда
//				ИнформацияРасшифровки.Вставить(Элемент.Идентификатор, Поля[0].Значение); 
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	СтрокаИнформацииРасшифровки = СериализаторXDTO.ЗаписатьXDTO(ИнформацияРасшифровки);
//	
//	Возврат СериализаторXDTO.ЗаписатьXDTO(ТабличныйДокумент);
//    
//КонецФункции


